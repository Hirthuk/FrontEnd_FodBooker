

### Previous State (Without CORS and Error)

Initially, you had set up a **Node.js** and **Express** backend, along with a **React frontend** on separate ports (localhost:3000 for the backend and localhost:5173 for the frontend). You were trying to communicate between them. When you attempted to fetch data from the backend using the React frontend, the requests were blocked due to **same-origin policy**, which is a security measure implemented by browsers. This led to the issue where your frontend couldn’t fetch data from the backend.

### What We Needed to Achieve

We wanted to allow your **frontend** to make requests (like fetching user details or login status) to your **backend** while both were running on different domains/ports (localhost:5173 and localhost:3000). To enable this, we needed to allow **Cross-Origin Resource Sharing (CORS)**.

### Key Concepts and Steps Implemented

#### 1. **CORS (Cross-Origin Resource Sharing)**
   **CORS** is a mechanism that allows your frontend, hosted on a different port, to access resources from your backend API server. The browser, by default, blocks requests from different origins to prevent security issues like cross-site scripting. In our case, your frontend (`localhost:5173`) was considered a different origin from your backend (`localhost:3000`).

   **Steps Taken:**
   - We used the `cors` middleware in Express. This middleware enables cross-origin requests by adding the appropriate headers to the server’s responses.
   
   **Code Added:**
   ```javascript
   import cors from 'cors';

   app.use(cors({
       origin: "http://localhost:5173", // Allow your frontend origin
       credentials: true, // Allow credentials like cookies or sessions
   }));
   ```

   - By adding this middleware, we allowed your frontend to make requests to the backend without being blocked by the browser’s same-origin policy.

#### 2. **Sessions and Cookies**
   Your backend was using **sessions** and **cookies** to manage user authentication. The session data is stored on the server and linked to a session ID stored in a cookie on the client (browser).

   **Steps Taken:**
   - The `express-session` middleware was already in use to manage user sessions:
     ```javascript
     app.use(session({
         secret: process.env.SESSION_SECRET,
         resave: false,
         saveUninitialized: true,
         cookie: {
             maxAge: 1000 * 60 * 60, // 1 hour session duration
             secure: false, // In production, this should be set to true with HTTPS
         }
     }));
     ```

   **Why Sessions are Important:**
   - When a user logs in, their session is stored in memory on the server. The session is associated with the user’s session ID stored in their browser’s cookies.
   - Since the frontend is on a different origin (localhost:5173) than the backend (localhost:3000), CORS needs to allow cookies (which contain the session ID) to be passed between them. That’s why we enabled `credentials: true` in CORS.

#### 3. **Passport Authentication (Local and Google)**
   The **Passport.js** library was used to handle authentication (both **local** and **Google** login). The passport strategy handles verifying user credentials when they log in and creating a session for authenticated users.

   **Steps Taken:**
   - **Local Strategy**: Verifies the user’s email and password.
     - Passport takes the credentials (username and password) from the form, validates them against your database, and creates a session if successful.
   
     ```javascript
     passport.use('local', new LocalStrategy(async function verify(username, password, cb) {
         // Query user from the database using the username (email)
         const query = "SELECT firstname, password FROM user_record WHERE email = ?";
         await db.query(query, [username], (err, results) => {
             if (err) return cb(err);
             
             if (results.length === 0) return cb(null, false, { message: "Email not registered" });
             
             const user = results[0];
             bcrypt.compare(password, user.password, (err, isMatch) => {
                 if (err) return cb(err);
                 if (isMatch) return cb(null, user);
                 return cb(null, false, { message: "Incorrect password" });
             });
         });
     }));
     ```

   - **Google Strategy**: Handles Google OAuth authentication and saves or retrieves the user from your database based on their Google profile.

     ```javascript
     passport.use('google', new GoogleStrategy({
         clientID: process.env.GOOGLE_CLIENT_ID,
         clientSecret: process.env.GOOGLE_CLIENT_SECRET,
         callbackURL: "http://localhost:3000/auth/google/secrets",
     }, async (accessToken, refreshToken, profile, cb) => {
         const query = "SELECT * FROM user_record WHERE email = ?";
         await db.query(query, [profile.email], (err, results) => {
             // Logic to handle user login or signup
         });
     }));
     ```

#### 4. **Axios for API Requests from the Frontend**
   On the frontend, we used **Axios** to make HTTP requests to the backend API. We fetched the user details using a GET request from the frontend.

   **Steps Taken:**
   - In the `App.jsx` file, we used Axios to send a request to the backend to fetch the user’s details.
   
     ```javascript
     async function getDetails() {
       try {
         const response = await axios.get("http://localhost:3000/UsernameDetails", { withCredentials: true });
         const firstname = response.data.firstName;
         setusername(firstname);
       } catch (error) {
         console.error("Error fetching user details:", error);
       }
     }
     ```

   **Concepts:**
   - **`withCredentials: true`**: We need to send this option in the Axios request so that the browser passes the session cookies along with the request. This is required when dealing with cookies across different origins (ports in this case).
   
   - This request fetches the user’s first name from the backend and updates the frontend with that information.

#### 5. **Session Handling on the Backend**
   The `/UsernameDetails` route on the backend was designed to return the logged-in user’s details if the session is valid.

   **Code Added:**
   ```javascript
   app.get("/UsernameDetails", (req, res) => {
     if (req.isAuthenticated()) {
       return res.json({
         firstName: req.user.firstname,
       });
     } else {
       res.status(401).json({ message: "Unauthorized" });
     }
   });
   ```

   **Concepts:**
   - **`req.isAuthenticated()`**: This function checks if the user is logged in and authenticated (based on the session). If they are, it returns the user’s first name in JSON format to the frontend.
   - If the user is not authenticated, it returns an unauthorized response (`401` status).

### Final Flow and How It Works
1. **Frontend** sends a request to the backend using Axios (`getDetails()`), with cookies enabled (`withCredentials: true`).
2. **Backend** processes the request, verifies the session, and returns the user’s details if authenticated.
3. **CORS** ensures the frontend and backend can communicate despite being on different origins.
4. **Sessions** and **cookies** handle the authentication flow, allowing users to stay logged in.
5. **Passport** is used for both local and Google login strategies, managing user login and registration.

### Key Concepts Recap:
- **CORS (Cross-Origin Resource Sharing)**: Allows the frontend to access backend resources.
- **Sessions and Cookies**: Used for user authentication and persistent login across requests.
- **Passport Authentication**: Handles login and user sessions with strategies like Local and Google OAuth.
- **Axios**: Used on the frontend to make requests to the backend, with session cookies enabled.
- **Express Middleware**: Middleware like `cors`, `express-session`, and `passport` are crucial in handling requests, sessions, and authentication.

By enabling CORS, managing sessions, and using Passport for authentication, we successfully established communication between your frontend and backend while ensuring secure user authentication and data transfer.
